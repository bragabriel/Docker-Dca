********************************************************************************
		DOCKER - AULA 03 - Melhores Práticas e Multistage Build
********************************************************************************

# DICA 1: A ordem importa quando tratados do Cache (DockerFile);
A ordem dos passos de build ordena os passos do que irá sofrer menos mudanças para o que irá sofrer mais alterações.

# DICA 2: COPY mais específico para limitar a quebra de cachetree;

# DICA 3: Identifique as instruções que podem ser AGRUPADAS [&&];
(cada instrução cria uma nova camada, então podemos resumir em menos camadas e melhorar a performance)

# DICA 4: Remova as pendencias desnecessárias;

# DICA 5: Remover o cache do gerenciador de pacotes;

# DICA 6: Utilizar images oficiais quando possível;

# DICA 7: Utilizar tags mais específicas;

# DICA 8: Procure por flavors mínimos;

# DICA 9: Multi-Stage Build; (começou no docker 17.05) 
(Utilizado para poder otimizar o Dockerfiles e deixar fácil de gerenciar)



exemplo:
FROM		debian:9
RUN		apt-get update \
		&& apt-get install -y \
		openjdk-8-jdk \
COPY 		app/target/app.jar /app/app.jar
ENTRYPOINT	["java", "-jar", "/app/app.jar"]


//Relembrando alguns comandos:

// Construindo uma image:
/> docker image build -t nome:tag .

// Pega um container rodando e salva ele em um arquivo .tar (salva vidas mas não é certo usar)
/> docker save

// Carrega o container salvo em .tar (salva vidas mas não é bom usar)
/> docker load

// Rodando o container
/> docker container run --rm -it echo-container TESTEEEE OLAAAA


> ls -l

> docker image ls

> cd ~/dockerfiles/echo-container

> ls -l

> cat Dockerfile

//Criando uma image teste
> docker image build -t teste:lateste .   ( . : diretório atual)
//Enviando a image para o contexto de build

//Não tevemos utilizar um deiretório externo para o contexto de build

> cd

> mkdir -p dockerfiles/exemplo01

> cd dockerfiles/exemplo01

> echo "Docker file Melhores Práticas" > conteudo.txt  (criando um conteudo.txt com o conteúdo "Docker file Melhores Práticas")

> cat conteudo.txt (exibindo o conteudo do arquivo conteudo.txt)

> vim Dockerfile (criando o Dockerfile)

//Dentro do vim Dockerfile
>FROM busybox				// busybox é uma image menor que o alpine (Só com os comandos básicos do Linux)
>COPY conteudo.txt/   			//copiando conteudo.txt para o diretorio /
>RUN cat /conteudo.txt			// Rodando cat no conteudo.txt


> 'ESC' (salvando no vim)

> :wq (saindo do vim)

> docker image ls

> docker image build -t exemplo:v1 .  //criando uma image chamada exemplo com tag v1

> docker image ls (conferindo que temos nossa image v1)

> mkdir context

> mkdir image

> ls -l

> mv Dockerfile image/    //movendo dockerfile para image/
 
> mv conteudo.txt context/     //movendo conteudo.txt para context/

/////> sudo apt-get install tree -y (instalando o tree para ficar mais fácil de visualizar)

> tree

> docker image build -t exemplo:v2  // Ao utilizarmos este comando, teremos erro, pois não temos o Dockerfile no mesmo diretório

//Para resolver isso:

> docker image build --no-cache -t exemplo:v2 -f image/Dockerfile context/    (utilizando a estrutura da image que ficou no cache & utilizando o Dockerfile de dentro da pasta image/ & pegando o contexto que está dentro da pasta context/)

> docker image ls | head -n1 ; docker image ls | grep exemplo

// docker image ls | head -n1		(executa o comando e pega a primeira imagem da cabeça [de cima])
// docker image ls | grep exemplo 	(lista o que é 'exemplo')
// ;  (serve para executar um comando e depois o outro)


> sudo cp -r /var/log ~/dockerfiles/exemplo1/context (copiando varios arquivos de /log para /context)
// Comando não funcionou para mim, talvez por não estar utilizando Linux e windows? Não sei

> docker image ls | egrep "REPOSITORY|exemplo"


# .dockerignore
//Podemos utilizar o .dockerignore como o .gitignore na hora de enviar algo para o contexto de build

> vim context/.dockerignore

> tecla 'I'

>#Comentario: Ignorando arquivos do diretório de log
>log

> tecla 'ESC'

> :wq

> docker image ls | egrep "REPOSITORY|exemplo"

//


> cd

> mkdir -p dockerfiles/dicas

> cd dockerfiles/dicas/

> git clone https://github.com/caiodelgadon ew/java-wc-app.git app  (clonando repositorio)

> tree

> vim Dockefile

> tecla "i"

>FROM 		debian:9
>RUN 		apt-get update
>RUN 		apt-get install -y openjdk-8-jdk ssh vim
>COPY 		app /app
>ENTRYPOINT 	["java", "-jar", "/app/target/app.jar"]

> tecla "esc"

> :wq

> docker image build -t dicas:v1 .


//Fazendo um COPY mais específicico (DICA 2)
> vim Dockerfile

> tecla 'i'

>FROM 		debian:9
>RUN 		apt-get update
>RUN 		apt-get install -y openjdk-8-jdk ssh vim
>COPY 		app/target/app.jar /app/app.jar
>COPY		app/samples /samples
>ENTRYPOINT 	["java", "-jar", "/app/app.jar"]

> tecla 'esc'

> :wq


//construindo image utilizando as dicas para ganho de performance:
> docker image build -t dicas:v2 .

//conferindo o tamanho:
docker image ls | egrep "REPOSITORY|dicas"


//Rodando a aplicação (dicas:v1) para testar:
> docker container run --rm -it dicas:v1  /app/samples/1.txt


//Rodando a aplicação (dicas:v2) para testar:
> docker container run --rm -it dicas:v2 /samples/1.txt


// DICA 03

> vim Dockerfile

> tecla 'i'

FROM            debian:9
RUN             apt-get update \
                && apt-get install -y \
                openjdk-8-jdk wget \
                ssh vim
COPY            app/target/app.jar /app/app.jar
COPY            app/samples /samples
ENTRYPOINT      ["java", "-jar", "/app/app.jar"]

> tecla 'esc'

> :wq

//Rodando a image v3
> docker image build -t dicas:v3 .

> docker image ls | egrep "REPOSITORY|dicas"


// DICA 04

> vim Dockerfile

> tecla 'i'

FROM            debian:9
RUN             apt-get update \
                && apt-get install -y --no-install-recommends\
                openjdk-8-jdk wget \
COPY            app/target/app.jar /app/app.jar
COPY            app/samples /samples
ENTRYPOINT      ["java", "-jar", "/app/app.jar"]


> tecla 'esc'

> :wq

> docker image build -t dicas:v4 .

//Arquivos cache que são mandados para dentro do container. Por isso a dica 5 é tão importante! (Remover o cache
> tree /var/lib/apt/lists/
> tree /var/cache/apt

> docker image ls | egrep "REPOSITORY|dicas"


// DICA 05

> vim Dockerfile

> tecla 'i'

FROM            debian:9
RUN             apt-get update \
                && apt-get install -y --no-install-recommends\
                openjdk-8-jdk wget \
		&& rm -rf /var/lib/apt/lists \
		&& rm -rf /var/cache/apt
COPY            app/target/app.jar /app/app.jar
COPY            app/samples /samples
ENTRYPOINT      ["java", "-jar", "/app/app.jar"]

> tecla 'esc'

> :wq

> docker image build -t dicas:v5 .

> docker image ls | egrep "REPOSITORY|dicas" (conferindo o tamanho das images - percebemos que por limpar o cache, o v5 é o que tem menor tamanho)



// DICA 6

> vim Dockerfile

> tecla 'i'

FROM 		openjdk
COPY            app/target/app.jar /app/app.jar
COPY            app/samples /samples
ENTRYPOINT      ["java", "-jar", "/app/app.jar"]

> tecla 'esc'

> :wq

> docker image build -t dicas:v6 .

> docker image ls | egrep "REPOSITORY|dicas"



// DICA 7 (multistage)

> vim Dockerfile

> tecla 'i'

FROM 		openjdk:8
COPY            app/target/app.jar /app/app.jar
COPY            app/samples /samples
ENTRYPOINT      ["java", "-jar", "/app/app.jar"]

> tecla 'esc'

> :wq

> docker image build -t dicas:v7 .

> docker image ls | egrep "REPOSITORY|dicas"



// DICA 8 (images que utilizam menos espaços [slim & alpine]
slim - Baseada no Debian - Utiliza a biblioteca "GNU libc"
alpine - Baseada na distribuição Linux chamada Alpine - Utiliza a biblioteca "musl lbc"


//Baixando as images:
> docker image pull openjdk:8

> docker image pull openjdk:8-jre-slim

> docker image pull openjdk:8-jre-alpine


//Conferindo o tamanho das images:
> docker image ls | egrep "REPOSITORY|openjdk"


> vim Dockerfile

> tecla 'i'

FROM 		openjdk:8-jre-alpine
COPY            app/target/app.jar /app/app.jar
COPY            app/samples /samples
ENTRYPOINT      ["java", "-jar", "/app/app.jar"]

> tecla 'esc'

> :wq

> docker image build -t dicas:v8 .

> docker image ls | egrep "REPOSITORY|dicas"



// DICA 09

> git clone https://github.com/alexellis/href-counter.git ~/dockerfiles/multistage  (clorando o rep)

> cd dockerfiles/multistage 

> rm Docker* 

> vim Dockerfile

> tecla 'i'

FROM            golang:1.7.3
WORKDIR         go/src/github.com/alexellis/href-counter/
RUN             go get -d -v golang.org/x/net/html
COPY            app.go .
RUN             CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .
CMD             ["./app"]

> tecla 'esc'

> :wq

>  docker container run --rm -it dicas:v2 /samples/1.txt
>  docker container run --rm -it dicas:v3 /samples/1.txt
>  docker container run --rm -it dicas:v4 /samples/1.txt


> docker image build -t multistage:v1

> docker image ls | egrep "REPOSITORY|multistage"


// Multistage:

> vim Dockerfile

> tecla 'i'

FROM    golang:1.7.3 AS builder
WORKDIR go/src/github.com/alexellis/href-counter/
RUN     go get -d -v golang.org/x/net/html
COPY    app/go .
RUN     CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .

FROM    alpine:latest
RUN     apk --no-cache add ca-certificates
WORKDIR /root/
COPY    --from=builder /go/src/github.com/alexellis/href-counter/app .
CMD     ["./app"]

> tecla 'esc'

> :wq


//buildando:
> docker image build -t multistage:v2 .

//Conferindo o tamanho:
> docker image ls | egrep "REPOSITORY|multistage"

//Testando a image:
> docker container run --rm -it -e url=https://youtube.com/caiodelgadonew multistage:v1